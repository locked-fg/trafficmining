# java -Djava.util.logging.config.file=\pfad\zur\datei\logging.properties
# der ConsoleHandler gibt die Nachrtichten auf std.err aus
handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler

# festlegen der Default Loglevels
.level=INFO

############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################
# default file output soll im user verzeichnis gespeichert werden
#java.util.logging.FileHandler.pattern = %h/java%u.log
java.util.logging.FileHandler.pattern = java%u.log
java.util.logging.FileHandler.limit = 5000000
java.util.logging.FileHandler.count = 1
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter
java.util.logging.FileHandler.level = INFO

# zus\u00e4tzlich zu den normalen Logleveln kann f\u00fcr jeden Handler noch ein eigener Filter
# vergeben werden. Das ist n\u00fctzlich wenn beispielsweise alle Nachrichten auf der Konsole ausgeben werden sollen
# aber nur ab INFO in das Logfile geschrieben werden soll.
java.util.logging.ConsoleHandler.level = ALL
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter
#java.util.logging.ConsoleHandler.formatter = de.lmu.ifi.dbs.utilities.formatter.OneLineShortFormatter

############################################################
# Extraeinstellungen f\u00fcr einzelne Logger
############################################################

# f\u00fcr einzelne Logger kann hier ein eigenes Loglevel fest gelegt werden.
# Werte aus java.util.logging.Level: SEVERE (highest value), WARNING, INFO, CONFIG, FINE, FINER, FINEST (lowest value)
de.level = INFO
org.jdesktop.swingx.mapviewer.AbstractTileFactory.level = WARNING
