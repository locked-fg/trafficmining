package de.lmu.ifi.dbs.trafficmining;

import de.lmu.ifi.dbs.trafficmining.utils.MapBounds;
import de.lmu.ifi.dbs.trafficmining.utils.PbfBoundsLoader;
import de.lmu.ifi.dbs.trafficmining.utils.PbfOsmLoader;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Point2D;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileFilter;
import org.jdesktop.swingx.JXMapViewer;
import org.jdesktop.swingx.mapviewer.DefaultTileFactory;
import org.jdesktop.swingx.mapviewer.GeoPosition;
import org.jdesktop.swingx.painter.CompoundPainter;
import org.jdesktop.swingx.painter.Painter;

public class PbfImportFrame extends javax.swing.JFrame {

    private final SelectionPainter selectionPainter = new SelectionPainter();
    private final CompoundPainter compoundPainter = new CompoundPainter();
    private JFileChooser fileChooser = null;
    private JXMapViewer map = null;
    private String recentlyUsedDirectory = "";
    private PbfOsmLoader worker = null;
    private MapBounds pbfBounds;
    private File pbfFile;
    private File osmFile;
    private File srtmFile;

    /**
     * Creates new form NewJFrame
     */
    public PbfImportFrame() {
        initComponents();
        map = mapKit.getMainMap();
        map.addMouseListener(selectionPainter);
        map.addMouseMotionListener(selectionPainter);
    }

    private void doImport() {
        try {
            if (worker != null) {
                worker.cancel(true);
                importButton.setText("import");
                worker = null;
            } else {
                worker = new PbfOsmLoader(pbfFile, osmFile, srtmFile,
                        selectionPainter.getBounds(),
                        srtmCheckbox.isSelected());
                worker.addPropertyChangeListener(new PropertyChangeListener() {

                    @Override
                    public void propertyChange(PropertyChangeEvent evt) {
                        if (worker.getState() == SwingWorker.StateValue.DONE) {
                            importButton.setText("run");
                            progressBar.setToolTipText("");
                            progressBar.setIndeterminate(false);
                            worker = null;
                        }
                    }
                });

                worker.execute();

                progressBar.setIndeterminate(true);
                importButton.setText("stop");
            }
        } catch (IOException ex) {
            Logger.getLogger(PbfImportFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        javax.swing.JSplitPane splitPane = new javax.swing.JSplitPane();
        javax.swing.JPanel leftPanel = new javax.swing.JPanel();
        javax.swing.JPanel loaderPanel = new javax.swing.JPanel();
        javax.swing.JLabel pbfLabel = new javax.swing.JLabel();
        pbfFilenameLabel = new javax.swing.JFormattedTextField();
        setInputFileButton = new javax.swing.JButton();
        javax.swing.JLabel osmLabel = new javax.swing.JLabel();
        osmFilenameLabel = new javax.swing.JFormattedTextField();
        setOutputFileButton = new javax.swing.JButton();
        javax.swing.JLabel srtmLabel = new javax.swing.JLabel();
        srtmCheckbox = new javax.swing.JCheckBox();
        srtmDirectoryLabel = new javax.swing.JFormattedTextField();
        setSrtmDirButton = new javax.swing.JButton();
        javax.swing.JPanel selectionPanel = new javax.swing.JPanel();
        javax.swing.Box.Filler leftFiller = new javax.swing.Box.Filler(new java.awt.Dimension(26, 0), new java.awt.Dimension(26, 0), new java.awt.Dimension(21, 32767));
        javax.swing.JLabel topLabel = new javax.swing.JLabel();
        topField = new javax.swing.JFormattedTextField();
        javax.swing.JLabel leftLabel = new javax.swing.JLabel();
        leftField = new javax.swing.JFormattedTextField();
        javax.swing.JLabel rightLabel = new javax.swing.JLabel();
        rightField = new javax.swing.JFormattedTextField();
        javax.swing.JLabel bottomLabel = new javax.swing.JLabel();
        bottomField = new javax.swing.JFormattedTextField();
        javax.swing.Box.Filler rightFiller = new javax.swing.Box.Filler(new java.awt.Dimension(65, 0), new java.awt.Dimension(65, 0), new java.awt.Dimension(45, 32767));
        javax.swing.JPanel progressPanel = new javax.swing.JPanel();
        importButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        javax.swing.Box.Filler filler = new javax.swing.Box.Filler(new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 32767));
        javax.swing.Box.Filler filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        javax.swing.JButton closeButton = new javax.swing.JButton();
        javax.swing.JPanel mapPanel = new javax.swing.JPanel();
        mapKit = new org.jdesktop.swingx.JXMapKit();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Import PBF");

        leftPanel.setLayout(new java.awt.GridBagLayout());

        loaderPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Loader"));
        loaderPanel.setLayout(new java.awt.GridBagLayout());

        pbfLabel.setText("PBF input");
        pbfLabel.setMaximumSize(new java.awt.Dimension(90, 15));
        pbfLabel.setMinimumSize(new java.awt.Dimension(90, 15));
        pbfLabel.setPreferredSize(new java.awt.Dimension(90, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        loaderPanel.add(pbfLabel, gridBagConstraints);

        pbfFilenameLabel.setEditable(false);
        pbfFilenameLabel.setMinimumSize(new java.awt.Dimension(150, 20));
        pbfFilenameLabel.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        loaderPanel.add(pbfFilenameLabel, gridBagConstraints);

        setInputFileButton.setText("...");
        setInputFileButton.setMaximumSize(null);
        setInputFileButton.setMinimumSize(null);
        setInputFileButton.setPreferredSize(new java.awt.Dimension(65, 20));
        setInputFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setInputFileButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        loaderPanel.add(setInputFileButton, gridBagConstraints);

        osmLabel.setText("OSM output");
        osmLabel.setMaximumSize(new java.awt.Dimension(90, 15));
        osmLabel.setMinimumSize(new java.awt.Dimension(90, 15));
        osmLabel.setPreferredSize(new java.awt.Dimension(90, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        loaderPanel.add(osmLabel, gridBagConstraints);

        osmFilenameLabel.setEditable(false);
        osmFilenameLabel.setText("output.osm");
        osmFilenameLabel.setMinimumSize(new java.awt.Dimension(150, 20));
        osmFilenameLabel.setOpaque(false);
        osmFilenameLabel.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        loaderPanel.add(osmFilenameLabel, gridBagConstraints);

        setOutputFileButton.setText("...");
        setOutputFileButton.setMaximumSize(null);
        setOutputFileButton.setMinimumSize(null);
        setOutputFileButton.setPreferredSize(new java.awt.Dimension(65, 20));
        setOutputFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setOutputFileButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        loaderPanel.add(setOutputFileButton, gridBagConstraints);

        srtmLabel.setText("SRTM directory");
        srtmLabel.setMaximumSize(new java.awt.Dimension(90, 15));
        srtmLabel.setMinimumSize(new java.awt.Dimension(90, 15));
        srtmLabel.setPreferredSize(new java.awt.Dimension(90, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        loaderPanel.add(srtmLabel, gridBagConstraints);

        srtmCheckbox.setSelected(true);
        srtmCheckbox.setToolTipText("<html>\nUse SRTM?<br>\nyes or no\n</html>");
        srtmCheckbox.setEnabled(false);
        srtmCheckbox.setMaximumSize(new java.awt.Dimension(26, 21));
        srtmCheckbox.setMinimumSize(new java.awt.Dimension(26, 21));
        srtmCheckbox.setPreferredSize(new java.awt.Dimension(26, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        loaderPanel.add(srtmCheckbox, gridBagConstraints);

        srtmDirectoryLabel.setEditable(false);
        srtmDirectoryLabel.setText("./srtm");
        srtmDirectoryLabel.setMinimumSize(new java.awt.Dimension(150, 20));
        srtmDirectoryLabel.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        loaderPanel.add(srtmDirectoryLabel, gridBagConstraints);

        setSrtmDirButton.setText("...");
        setSrtmDirButton.setMaximumSize(null);
        setSrtmDirButton.setMinimumSize(null);
        setSrtmDirButton.setPreferredSize(new java.awt.Dimension(65, 20));
        setSrtmDirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setSrtmDirButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        loaderPanel.add(setSrtmDirButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        leftPanel.add(loaderPanel, gridBagConstraints);

        selectionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Selection"));
        selectionPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 4;
        selectionPanel.add(leftFiller, gridBagConstraints);

        topLabel.setText("Top (Latitude)");
        topLabel.setMaximumSize(new java.awt.Dimension(90, 15));
        topLabel.setMinimumSize(new java.awt.Dimension(90, 15));
        topLabel.setPreferredSize(new java.awt.Dimension(90, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        selectionPanel.add(topLabel, gridBagConstraints);

        topField.setEditable(false);
        topField.setMaximumSize(new java.awt.Dimension(138, 20));
        topField.setMinimumSize(new java.awt.Dimension(138, 20));
        topField.setPreferredSize(new java.awt.Dimension(138, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        selectionPanel.add(topField, gridBagConstraints);

        leftLabel.setText("Left (Longitude)");
        leftLabel.setMaximumSize(new java.awt.Dimension(90, 15));
        leftLabel.setMinimumSize(new java.awt.Dimension(90, 15));
        leftLabel.setPreferredSize(new java.awt.Dimension(90, 15));
        leftLabel.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        selectionPanel.add(leftLabel, gridBagConstraints);

        leftField.setEditable(false);
        leftField.setMaximumSize(new java.awt.Dimension(138, 20));
        leftField.setMinimumSize(new java.awt.Dimension(138, 20));
        leftField.setPreferredSize(new java.awt.Dimension(138, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        selectionPanel.add(leftField, gridBagConstraints);

        rightLabel.setText("Right (Longitude)");
        rightLabel.setMaximumSize(new java.awt.Dimension(90, 15));
        rightLabel.setMinimumSize(new java.awt.Dimension(90, 15));
        rightLabel.setPreferredSize(new java.awt.Dimension(90, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        selectionPanel.add(rightLabel, gridBagConstraints);

        rightField.setEditable(false);
        rightField.setMaximumSize(new java.awt.Dimension(138, 20));
        rightField.setMinimumSize(new java.awt.Dimension(138, 20));
        rightField.setPreferredSize(new java.awt.Dimension(138, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        selectionPanel.add(rightField, gridBagConstraints);

        bottomLabel.setText("Bottom (Latitude)");
        bottomLabel.setMaximumSize(new java.awt.Dimension(90, 15));
        bottomLabel.setMinimumSize(new java.awt.Dimension(90, 15));
        bottomLabel.setPreferredSize(new java.awt.Dimension(90, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        selectionPanel.add(bottomLabel, gridBagConstraints);

        bottomField.setEditable(false);
        bottomField.setMaximumSize(new java.awt.Dimension(138, 20));
        bottomField.setMinimumSize(new java.awt.Dimension(138, 20));
        bottomField.setPreferredSize(new java.awt.Dimension(138, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        selectionPanel.add(bottomField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 4;
        selectionPanel.add(rightFiller, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        leftPanel.add(selectionPanel, gridBagConstraints);

        progressPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Progress"));
        progressPanel.setLayout(new java.awt.GridBagLayout());

        importButton.setText("import");
        importButton.setMaximumSize(null);
        importButton.setMinimumSize(null);
        importButton.setPreferredSize(new java.awt.Dimension(65, 20));
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        progressPanel.add(importButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        progressPanel.add(progressBar, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        progressPanel.add(filler, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        leftPanel.add(progressPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 1.0;
        leftPanel.add(filler1, gridBagConstraints);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(18, 0, 0, 0);
        leftPanel.add(closeButton, gridBagConstraints);

        splitPane.setLeftComponent(leftPanel);

        mapPanel.setPreferredSize(new java.awt.Dimension(800, 600));
        mapPanel.setLayout(new java.awt.GridBagLayout());

        mapKit.setDefaultProvider(org.jdesktop.swingx.JXMapKit.DefaultProviders.OpenStreetMaps);
        mapKit.setAddressLocationShown(false);
        mapKit.setPreferredSize(new java.awt.Dimension(800, 600));
        mapKit.setZoom(15);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mapPanel.add(mapKit, gridBagConstraints);

        splitPane.setRightComponent(mapPanel);

        getContentPane().add(splitPane, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void setMapTileServer(TileServer ts) {
        map.setTileFactory(ts.getTileFactory());
        ((DefaultTileFactory) map.getTileFactory()).setThreadPoolSize(8);
        map.setRestrictOutsidePanning(true);
        map.setHorizontalWrapped(false);
    }

    private void loadApproximation() {
        try {
            final PbfBoundsLoader loader = new PbfBoundsLoader(pbfFile);
            loader.addPropertyChangeListener(new PropertyChangeListener() {

                @Override
                public void propertyChange(PropertyChangeEvent evt) {
                    if (evt.getPropertyName().equals(PbfBoundsLoader.EVT_BOUNDS)) {
                        pbfBounds = loader.getMapBounds();
                        useBounds();
                    }
                }
            });
            loader.loadAsync();
        } catch (IOException ex) {
            Logger.getLogger(PbfImportFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void useBounds() {
        Painter boundsPainter = new MyRectanglePainter(pbfBounds, new Color(0, 0, 255, 30), Color.BLUE);
        compoundPainter.setPainters(boundsPainter, selectionPainter);

        map.setOverlayPainter(compoundPainter);
        map.setZoom(1);
        map.calculateZoomFrom(pbfBounds.toSet());
        map.repaint();
    }

    private File showFilechooser(final String suffix, final String description,
            final boolean fileOnly, JFormattedTextField target) {
        fileChooser = new JFileChooser(recentlyUsedDirectory);
        fileChooser.setMultiSelectionEnabled(false);

        if (!fileOnly) {
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        } else {
            fileChooser.setFileFilter(new FileFilter() {

                @Override
                public boolean accept(File f) {
                    return f.isDirectory() || f.getName().toLowerCase().endsWith(suffix);
                }

                @Override
                public String getDescription() {
                    return suffix + " - " + description;
                }
            });
        }

        // If the user pressed "okay", try to load the files
        if (JFileChooser.APPROVE_OPTION == fileChooser.showOpenDialog(getContentPane())) {
            recentlyUsedDirectory = fileChooser.getCurrentDirectory().getAbsolutePath();
            target.setText(fileChooser.getSelectedFile().getAbsolutePath());
            return fileChooser.getSelectedFile();
        }
        return null;
    }

private void setInputFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setInputFileButtonActionPerformed
    pbfFile = showFilechooser(".pbf", "compressed osm file (pbf)", true, pbfFilenameLabel);
    if (pbfFile != null) {
        loadApproximation();
    }
}//GEN-LAST:event_setInputFileButtonActionPerformed

private void setOutputFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setOutputFileButtonActionPerformed
    osmFile = showFilechooser(".osm", "output osm file", true, osmFilenameLabel);
}//GEN-LAST:event_setOutputFileButtonActionPerformed

private void setSrtmDirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setSrtmDirButtonActionPerformed
    srtmFile = showFilechooser("", "directory for srtm files", false, srtmDirectoryLabel);
}//GEN-LAST:event_setSrtmDirButtonActionPerformed

private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
    doImport();
}//GEN-LAST:event_importButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField bottomField;
    private javax.swing.JButton importButton;
    private javax.swing.JFormattedTextField leftField;
    private org.jdesktop.swingx.JXMapKit mapKit;
    private javax.swing.JFormattedTextField osmFilenameLabel;
    private javax.swing.JFormattedTextField pbfFilenameLabel;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JFormattedTextField rightField;
    private javax.swing.JButton setInputFileButton;
    private javax.swing.JButton setOutputFileButton;
    private javax.swing.JButton setSrtmDirButton;
    private javax.swing.JCheckBox srtmCheckbox;
    private javax.swing.JFormattedTextField srtmDirectoryLabel;
    private javax.swing.JFormattedTextField topField;
    // End of variables declaration//GEN-END:variables
}

class MyRectanglePainter implements Painter<JXMapViewer> {

    private final MapBounds bounds;
    private final Color area;
    private final Color border;

    MyRectanglePainter(MapBounds bounds, Color area, Color border) {
        this.bounds = bounds;
        this.area = area;
        this.border = border;
    }

    @Override
    public void paint(Graphics2D g, JXMapViewer map, int i, int i1) {
        Point2D topLeft = map.getTileFactory().geoToPixel(new GeoPosition(bounds.top, bounds.left), map.getZoom());
        Point2D bottomRight = map.getTileFactory().geoToPixel(new GeoPosition(bounds.bottom, bounds.right), map.getZoom());

        int x = (int) topLeft.getX();
        int y = (int) topLeft.getY();
        int w = (int) Math.abs(bottomRight.getX() - topLeft.getX());
        int h = (int) Math.abs(bottomRight.getY() - topLeft.getY());

        Rectangle r = new Rectangle(x, y, w, h);

        Rectangle viewPort = map.getViewportBounds();
        g.translate(-viewPort.x, -viewPort.y);
        if (area != null) {
            g.setColor(area);
            g.fill(r);
        }
        if (border != null) {
            g.setColor(border);
            g.draw(r);
        }
    }
}

class SelectionPainter extends MouseAdapter implements Painter<JXMapViewer> {

    private Rectangle paintRectangle, start, end;
    private MapBounds bounds;
    private Color borderColor = new Color(0, 0, 200);
    private Color regionColor = new Color(0, 0, 200, 100);

    public SelectionPainter() {
    }

    @Override
    public void mousePressed(MouseEvent e) {
        if (e.getButton() != MouseEvent.BUTTON1) {
            paintRectangle = null;
            start = null;
        } else {
            start = new Rectangle(e.getPoint());
            ((JXMapViewer) e.getSource()).setPanEnabled(false);
        }
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        if (start != null) {
            end = new Rectangle(e.getPoint());
            paintRectangle = start.union(end);
            updateBounds(((JXMapViewer) e.getSource()));
        }
        ((JXMapViewer) e.getSource()).repaint();
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        if (start == null) {
            return;
        }
        end = new Rectangle(e.getPoint());
        paintRectangle = start.union(end);
        updateBounds(((JXMapViewer) e.getSource()));

        ((JXMapViewer) e.getSource()).setPanEnabled(true);
        ((JXMapViewer) e.getSource()).repaint();
    }

    @Override
    public void paint(Graphics2D gd, JXMapViewer map, int i, int i1) {
        if (paintRectangle != null) {
            gd.setColor(regionColor);
            gd.fillRect(paintRectangle.x, paintRectangle.y, paintRectangle.width, paintRectangle.height);
            gd.setColor(borderColor);
            gd.drawRect(paintRectangle.x, paintRectangle.y, paintRectangle.width, paintRectangle.height);
        }
    }

    public MapBounds getBounds() {
        return bounds;
    }

    private void updateBounds(JXMapViewer map) {
        Point topLeft = new Point(paintRectangle.x, paintRectangle.y);
        Point bottomRight = new Point(paintRectangle.x + paintRectangle.width,
                paintRectangle.y + paintRectangle.height);

        Rectangle viewPort = map.getViewportBounds();
        topLeft.translate(viewPort.x, viewPort.y);
        bottomRight.translate(viewPort.x, viewPort.y);

        GeoPosition topLeftGeo = map.getTileFactory().pixelToGeo(topLeft, map.getZoom());
        GeoPosition bottomRightGeo = map.getTileFactory().pixelToGeo(bottomRight, map.getZoom());

        bounds = new MapBounds(topLeftGeo, bottomRightGeo);
    }
}
